@using Blazor.Services
@inject AuthenticationService AuthService
@inject NavigationManager Navigation

<div class="vacation-user-profile">
    @if (currentUser != null)
    {
        <div class="card vacation-profile-card">
            <div class="card-header vacation-profile-header d-flex justify-content-between align-items-center">
                <h4 class="mb-0"><i class="bi bi-person-badge-fill me-2"></i>Velkommen til din ferie-profil, @currentUser.Username! üèñÔ∏è</h4>
                <button class="btn btn-outline-danger btn-sm" @onclick="HandleLogout" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <i class="bi bi-box-arrow-right me-1"></i>
                    }
                    Log ud
                </button>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="vacation-section-title">üß≥ Rejsende Information</h6>
                        <table class="table table-borderless table-sm">
                            <tbody>
                                <tr>
                                    <td><strong>Email:</strong></td>
                                    <td>@currentUser.Email</td>
                                </tr>
                                <tr>
                                    <td><strong>Brugernavn:</strong></td>
                                    <td>@currentUser.Username</td>
                                </tr>
                                <tr>
                                    <td><strong>Rolle:</strong></td>
                                    <td>
                                        <span class="badge @GetRoleBadgeClass(currentUser.Role)">
                                            @GetRoleDisplayName(currentUser.Role)
                                        </span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h6 class="vacation-section-title">üîê Session Information</h6>
                        <table class="table table-borderless table-sm">
                            <tbody>
                                <tr>
                                    <td><strong>Login Status:</strong></td>
                                    <td>
                                        <span class="badge bg-success">
                                            <i class="bi bi-check-circle me-1"></i>
                                            Logget ind
                                        </span>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Token:</strong></td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(tokenPreview))
                                        {
                                            <code class="small">@tokenPreview...</code>
                                            <button class="btn btn-link btn-sm p-0 ms-1" @onclick="ToggleTokenVisibility">
                                                @if (showFullToken)
                                                {
                                                    <i class="bi bi-eye-slash"></i>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-eye"></i>
                                                }
                                            </button>
                                        }
                                    </td>
                                </tr>
                                @if (showFullToken && !string.IsNullOrEmpty(fullToken))
                                {
                                    <tr>
                                        <td colspan="2">
                                            <div class="alert alert-info p-2">
                                                <small>
                                                    <strong>Fuld JWT Token:</strong><br />
                                                    <code style="word-break: break-all; font-size: 0.7rem;">@fullToken</code>
                                                </small>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                @if (currentUser.Role == "Admin")
                {
                    <div class="mt-3">
                        <h6 class="text-muted">Administrator Funktioner</h6>
                        <div class="btn-group" role="group">
                            <button class="btn btn-outline-primary btn-sm" @onclick="NavigateToAdminUsers">
                                <i class="bi bi-people me-1"></i>
                                Administrer Brugere
                            </button>
                            <button class="btn btn-outline-info btn-sm" @onclick="NavigateToAdminHotels ">
                                <i class="bi bi-building me-1"></i>
                                Administrer Hoteller
                            </button>
                        </div>
                    </div>
                }

                <div class="mt-3">
                    <h6 class="text-muted">Handlinger</h6>
                    <div class="btn-group" role="group">
                        <button class="btn btn-outline-secondary btn-sm" @onclick="RefreshUserInfo">
                            <i class="bi bi-arrow-clockwise me-1"></i>
                            Opdater Info
                        </button>
                        <button class="btn btn-outline-primary btn-sm" @onclick="NavigateToRooms">
                            <i class="bi bi-search me-1"></i>
                            S√∏g Vaerelser
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (isLoading)
    {
        <div class="text-center p-4">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Indlaeser...</span>
            </div>
            <p class="mt-2 text-muted">Henter bruger information...</p>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            <h5>Ikke logget ind</h5>
            <p>Du skal vaere logget ind for at se denne side.</p>
            <button class="btn btn-primary" @onclick="NavigateToLogin">
                G√• til login
            </button>
        </div>
    }
</div>

<style>
    .vacation-user-profile {
        max-width: 1000px;
        margin: 0 auto;
        padding: 2rem;
        min-height: 100vh;
    }

    /* Vacation Profile Card */
    .vacation-profile-card {
        background: rgba(255, 255, 255, 0.95);
        border: 1px solid rgba(59, 130, 246, 0.2);
        border-radius: 24px;
        box-shadow: 0 20px 60px rgba(59, 130, 246, 0.15);
        backdrop-filter: blur(30px);
        overflow: hidden;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .vacation-profile-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 25px 80px rgba(59, 130, 246, 0.2);
        border-color: rgba(59, 130, 246, 0.3);
    }

    .vacation-profile-header {
        background: linear-gradient(135deg, #e0f2fe, #f0fdf4);
        border-bottom: 1px solid rgba(59, 130, 246, 0.2);
        border-radius: 24px 24px 0 0;
        padding: 2rem;
        position: relative;
        overflow: hidden;
    }

    .card-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, 
            rgba(99, 102, 241, 0.1) 0%, 
            rgba(139, 92, 246, 0.05) 50%, 
            rgba(59, 130, 246, 0.1) 100%);
        pointer-events: none;
    }

    .vacation-profile-header h4 {
        color: #1c1917;
        font-weight: 700;
        font-size: 1.75rem;
        position: relative;
        z-index: 1;
        margin: 0;
        background: linear-gradient(135deg, #3b82f6, #10b981);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .vacation-section-title {
        color: #3b82f6 !important;
        font-weight: 700;
        font-size: 1.1rem;
        margin-bottom: 1.5rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .card-header .btn {
        position: relative;
        z-index: 1;
    }

    .card-body {
        padding: 2.5rem;
        background: transparent;
    }

    /* Vacation Table Styling */
    .table {
        color: #1c1917;
        background: transparent;
    }

    .table td {
        padding: 1rem 0;
        vertical-align: middle;
        border: none;
        border-bottom: 1px solid rgba(59, 130, 246, 0.1);
    }

    .table td:first-child {
        font-weight: 600;
        color: #6b7280;
        width: 40%;
    }

    .table td:last-child {
        color: #1c1917;
        font-weight: 500;
    }

    /* Modern Badge Styling */
    .badge {
        font-size: 0.8rem;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
    }

    .badge:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    /* Section Headers */
    .text-muted {
        color: #64748b !important;
        font-weight: 600;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.1em;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid rgba(99, 102, 241, 0.2);
    }

    /* Modern Button Groups */
    .btn-group {
        gap: 0.75rem;
        display: flex;
        flex-wrap: wrap;
        margin-bottom: 0;
    }

    .btn-group .btn {
        margin-right: 0;
        border-radius: 12px;
        font-weight: 600;
        padding: 0.75rem 1.5rem;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        border: none;
        backdrop-filter: blur(10px);
    }

    .btn-group .btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s;
    }

    .btn-group .btn:hover::before {
        left: 100%;
    }

    .btn-outline-primary {
        background: rgba(99, 102, 241, 0.1);
        border: 1px solid rgba(99, 102, 241, 0.3);
        color: #a78bfa;
    }

    .btn-outline-primary:hover {
        background: rgba(99, 102, 241, 0.2);
        border-color: rgba(99, 102, 241, 0.5);
        color: #c4b5fd;
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(99, 102, 241, 0.3);
    }

    .btn-outline-secondary {
        background: rgba(71, 85, 105, 0.1);
        border: 1px solid rgba(71, 85, 105, 0.3);
        color: #94a3b8;
    }

    .btn-outline-secondary:hover {
        background: rgba(71, 85, 105, 0.2);
        border-color: rgba(71, 85, 105, 0.5);
        color: #cbd5e1;
        transform: translateY(-2px);
    }

    .btn-outline-info {
        background: rgba(59, 130, 246, 0.1);
        border: 1px solid rgba(59, 130, 246, 0.3);
        color: #93c5fd;
    }

    .btn-outline-info:hover {
        background: rgba(59, 130, 246, 0.2);
        border-color: rgba(59, 130, 246, 0.5);
        color: #bfdbfe;
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
    }

    .btn-outline-danger {
        background: rgba(239, 68, 68, 0.1);
        border: 1px solid rgba(239, 68, 68, 0.3);
        color: #fca5a5;
    }

    .btn-outline-danger:hover {
        background: rgba(239, 68, 68, 0.2);
        border-color: rgba(239, 68, 68, 0.5);
        color: #fecaca;
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(239, 68, 68, 0.3);
    }

    /* Code Styling */
    code {
        background: rgba(15, 15, 35, 0.8);
        color: #a78bfa;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-size: 0.85rem;
        font-family: 'JetBrains Mono', 'Fira Code', monospace;
        border: 1px solid rgba(99, 102, 241, 0.2);
        backdrop-filter: blur(10px);
    }

    .alert-info {
        background: rgba(59, 130, 246, 0.1);
        border: 1px solid rgba(59, 130, 246, 0.2);
        border-radius: 16px;
        padding: 1.5rem;
        backdrop-filter: blur(10px);
    }

    .alert-info code {
        background: rgba(15, 15, 35, 0.6);
        border: 1px solid rgba(59, 130, 246, 0.3);
    }

    /* Loading States */
    .spinner-border {
        width: 3rem;
        height: 3rem;
        border-width: 0.3em;
        border-color: rgba(99, 102, 241, 0.3);
        border-right-color: #6366f1;
    }

    .alert-warning {
        background: rgba(245, 158, 11, 0.1);
        border: 1px solid rgba(245, 158, 11, 0.2);
        border-radius: 16px;
        padding: 2rem;
        text-align: center;
        backdrop-filter: blur(10px);
    }

    .alert-warning h5 {
        color: #fbbf24;
        font-weight: 700;
        margin-bottom: 1rem;
    }

    .alert-warning p {
        color: #fcd34d;
        margin-bottom: 1.5rem;
    }

    /* Animations */
    @@keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .card {
        animation: slideInUp 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    }

    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .user-profile {
            padding: 1rem;
        }
        
        .card-header,
        .card-body {
            padding: 1.5rem;
        }
        
        .card-header h4 {
            font-size: 1.5rem;
        }
        
        .btn-group {
            flex-direction: column;
        }
        
        .btn-group .btn {
            width: 100%;
            margin-bottom: 0.5rem;
        }
        
        .table td {
            padding: 0.75rem 0;
        }
        
        .table td:first-child {
            width: 35%;
            font-size: 0.9rem;
        }
    }
</style>

@code {
    private AuthUserInfo? currentUser;
    private bool isLoading = true;
    private string tokenPreview = string.Empty;
    private string fullToken = string.Empty;
    private bool showFullToken = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfo();
        
        // Subscribe to authentication state changes
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async Task LoadUserInfo()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            if (await AuthService.IsAuthenticatedAsync())
            {
                currentUser = await AuthService.GetCurrentUserAsync();
                fullToken = await AuthService.GetTokenAsync() ?? string.Empty;
                tokenPreview = fullToken.Length > 20 ? fullToken.Substring(0, 20) : fullToken;
            }
            else
            {
                currentUser = null;
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl ved indlaesning af bruger info: {ex.Message}");
            currentUser = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleLogout()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            await AuthService.LogoutAsync();
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout fejl: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshUserInfo()
    {
        await LoadUserInfo();
    }

    private void ToggleTokenVisibility()
    {
        showFullToken = !showFullToken;
    }

    private string GetRoleBadgeClass(string role)
    {
        return role.ToLower() switch
        {
            "admin" => "bg-danger",
            "user" => "bg-primary",
            "manager" => "bg-warning text-dark",
            _ => "bg-secondary"
        };
    }

    private string GetRoleDisplayName(string role)
    {
        return role.ToLower() switch
        {
            "admin" => "Administrator",
            "user" => "Bruger",
            "manager" => "Manager",
            _ => role
        };
    }

    private async void OnAuthenticationStateChanged(object? sender, bool isAuthenticated)
    {
        if (!isAuthenticated)
        {
            currentUser = null;
            Navigation.NavigateTo("/login");
        }
        else
        {
            await LoadUserInfo();
        }
        
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }

    public void NavigateTo(string url)
    {
        Navigation.NavigateTo(url);
    }

    public void NavigateToRooms()
    {
        Navigation.NavigateTo("/rooms");
    }

    public void NavigateToAdminUsers()
    {
        Navigation.NavigateTo("/admin/users");
    }

    public void NavigateToAdminHotels()
    {
        Navigation.NavigateTo("/admin/hotels");
    }

    public void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}
