meta {
  name: Get Ticket By ID
  type: http
  seq: 3
  description: |
    Henter detaljeret information om et specifikt ticket.
    Dette simulerer en support medarbejder der skal se ticket detaljer.
    
    Features tested:
    - Ticket detaljer
    - Booking information
    - Bruger information
    - Room information
    - Hotel information
}

get {
  url: {{baseUrl}}/{{ticketId}}
  auth: bearer
}

auth:bearer {
  token: {{authToken}}
}

tests {
  test("Status code is 200 OK", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response contains ticket data", function() {
    expect(res.getBody()).to.have.property("data");
    expect(res.getBody().data).to.have.property("id");
    expect(res.getBody().data.id).to.equal(ticketId);
  });
  
  test("Ticket has all required fields", function() {
    const ticket = res.getBody().data;
    expect(ticket).to.have.property("ticketNumber");
    expect(ticket).to.have.property("title");
    expect(ticket).to.have.property("description");
    expect(ticket).to.have.property("serviceType");
    expect(ticket).to.have.property("priority");
    expect(ticket).to.have.property("status");
    expect(ticket).to.have.property("category");
    expect(ticket).to.have.property("createdAt");
    expect(ticket).to.have.property("updatedAt");
  });
  
  test("Ticket has requester information", function() {
    const ticket = res.getBody().data;
    expect(ticket).to.have.property("requesterId");
    expect(ticket).to.have.property("requesterEmail");
    expect(ticket).to.have.property("requesterUsername");
  });
  
  test("Ticket has booking information if linked", function() {
    const ticket = res.getBody().data;
    if (ticket.bookingId) {
      expect(ticket).to.have.property("bookingId");
      expect(ticket).to.have.property("roomId");
      expect(ticket).to.have.property("roomNumber");
      expect(ticket).to.have.property("hotelId");
      expect(ticket).to.have.property("hotelName");
    }
  });
  
  test("Ticket has correct service type", function() {
    expect(res.getBody().data.serviceType).to.equal("Cleaning");
  });
  
  test("Ticket has correct priority", function() {
    expect(res.getBody().data.priority).to.equal("Medium");
  });
  
  test("Ticket status is Open", function() {
    expect(res.getBody().data.status).to.equal("Open");
  });
  
  test("Response time is acceptable", function() {
    expect(res.getResponseTime()).to.be.below(2000);
  });
}
